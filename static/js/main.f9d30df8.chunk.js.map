{"version":3,"sources":["Components/Header/IconeTwitch.svg","Components/Header/Search.svg","Components/Header/MenuIco.svg","Components/Header/Croix.svg","Components/Header/Header.jsx","api.jsx","Components/Sidebar/Sidebar.jsx","Components/Games/Games.jsx","Components/TopStreams/TopStreams.jsx","Components/Live/Live.jsx","Components/GameStreams/GameStreams.jsx","Components/Error/Error.jsx","Components/Resultats/Resultats.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","useState","menu","showMenu","smallScreen","setSmallScreen","searchInput","setSearchInput","useEffect","mediaQuery","window","matchMedia","addListener","handleMediaQueryChange","removeListener","matches","hideMenu","className","onClick","to","src","logo","alt","onSubmit","e","preventDefault","required","value","onChange","target","handleKeyPress","type","pathname","search","croix","menuIco","api","axios","create","headers","Sidebar","topStreams","setTopStreams","a","get","result","dataArray","data","gameIDs","map","stream","game_id","userIDs","user_id","queryParamsGame","queryParamsUsers","id","urlFinalGames","urlFinalUsers","gamesNames","getUsers","gamesNameArray","arrayUsers","finalArray","gameName","truePic","login","forEach","name","user","profile_image_url","slice","fetchData","index","key","user_name","viewer_count","Games","games","setGames","game","newUrl","box_art_url","replace","state","gameID","TopStreams","channels","setChannels","thumbnail_url","channel","Live","infoStream","setInfoStream","infoGame","setInfoGame","slug","useParams","length","gameid","resultNomGame","nomJeu","height","width","title","language","GameStreams","location","useLocation","streamData","setStreamData","viewers","setViewers","gameStreams","totalViewers","reduce","acc","val","finalUrl","getUsersLogin","userLoginArray","Error","Resultats","setResult","streamerInfo","setStreamerInfo","cleanSearch","display_name","description","App","forceRefresh","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,+NC6F5BC,MAtFf,WAAmB,IAAD,EAEWC,oBAAS,GAFpB,mBAEPC,EAFO,KAEDC,EAFC,OAGwBF,oBAAS,GAHjC,mBAGPG,EAHO,KAGMC,EAHN,OAIwBJ,mBAAS,IAJjC,mBAIPK,EAJO,KAIMC,EAJN,KAUdC,qBAAU,WACN,IAAMC,EAAaC,OAAOC,WAAW,sBAKrC,OAHAF,EAAWG,YAAYC,GACvBA,EAAuBJ,GAEhB,WACHA,EAAWK,eAAeD,OAIlC,IAAMA,EAAyB,SAAAJ,GACxBA,EAAWM,QACVV,GAAe,GAEfA,GAAe,IAIjBW,EAAW,YACD,IAATd,GACCC,GAAUD,IAWlB,OACI,6BACI,yBAAKe,UAAU,cACTf,IAASE,IAEX,wBAAIa,UAAU,aACV,wBAAIC,QAASF,EAAUC,UAAU,YAC7B,kBAAC,IAAD,CAAMA,UAAU,OAAOE,GAAG,KACtB,yBAAKC,IAAKC,IAAMC,IAAI,cAAcL,UAAU,WAGpD,wBAAIC,QAASF,EAAUC,UAAU,YAC7B,kBAAC,IAAD,CAAMA,UAAU,OAAOE,GAAG,KAA1B,cAIJ,wBAAID,QAASF,EAAUC,UAAU,YAC7B,kBAAC,IAAD,CAAMA,UAAU,OAAOE,GAAG,gBAA1B,gBAIJ,wBAAIF,UAAU,YACV,0BAAMA,UAAU,aAAaM,SA7B5B,SAAAC,GACjBA,EAAEC,mBA6BkB,2BAAOC,UAAQ,EAACC,MAAOrB,EAAasB,SAAU,SAACJ,GAAD,OA3B/C,SAAAA,GACnBjB,EAAeiB,EAAEK,OAAOF,OA0BiDG,CAAeN,IAAIO,KAAK,OAAOd,UAAU,mBAC9F,kBAAC,IAAD,CACAA,UAAU,OACVE,GAAI,CAACa,SAAS,cAAD,OAAgB1B,KACzB,4BAAQyB,KAAK,UACT,yBAAKX,IAAKa,IAAQX,IAAI,cAAcL,UAAU,oBAStE,yBAAKA,UAAU,cACX,yBAAKC,QA1EI,WACjBf,GAAUD,IAyE0BkB,IAAMlB,EAAiBgC,IAAVC,IAAiBb,IAAI,wBAAwBL,UAAU,e,+BClEjGmB,E,OAnBLC,EAAMC,OAAO,CACnBC,QAAU,CACN,YAAc,iCACd,cAAkB,2CCiGXC,MAlGf,WAAoB,IAAD,EAEqBvC,mBAAS,IAF9B,mBAERwC,EAFQ,KAEIC,EAFJ,KAsEf,OAlEAlC,qBAAU,YACS,uCAAG,oDAAAmC,EAAA,sEACOP,EAAIQ,IAAI,uCADf,cACRC,EADQ,OAEVC,EAAYD,EAAOE,KAAKA,KAGxBC,EAAUF,EAAUG,KAAI,SAAAC,GACxB,OAAOA,EAAOC,WAEdC,EAAUN,EAAUG,KAAI,SAAAC,GACxB,OAAOA,EAAOG,WAKC,qCACA,qCAEfC,EAAkB,GAClBC,EAAmB,GAEvBP,EAAQC,KAAI,SAAAO,GACR,OAAQF,GAAiC,aAASE,EAAT,QAE7CJ,EAAQH,KAAI,SAAAO,GACR,OAAQD,GAAmC,aAASC,EAAT,QAI3CC,EAde,qCAcgBH,EAC/BI,EAde,qCAcgBH,EA7BrB,UAiCSnB,EAAIQ,IAAIa,GAjCjB,eAiCVE,EAjCU,iBAkCOvB,EAAIQ,IAAIc,GAlCf,QAkCVE,EAlCU,OAoCVC,EAAiBF,EAAWZ,KAAKA,KACjCe,EAAaF,EAASb,KAAKA,KAI3BgB,EAAcjB,EAAUG,KAAI,SAACC,GAc7B,OAbAA,EAAOc,SAAW,GAClBd,EAAOe,QAAU,GACjBf,EAAOgB,MAAQ,GAEfL,EAAeM,SAAQ,SAAAC,GACnBN,EAAWK,SAAQ,SAAAE,GACZnB,EAAOG,UAAYgB,EAAKb,IAAMN,EAAOC,UAAYiB,EAAKZ,KACrDN,EAAOe,QAAUI,EAAKC,kBACtBpB,EAAOc,SAAWI,EAAKA,KACvBlB,EAAOgB,MAAQG,EAAKH,aAIzBhB,KAGXR,EAAcqB,EAAWQ,MAAM,EAAE,IA1DnB,4CAAH,qDA6DfC,KACD,IAIC,yBAAKvD,UAAU,WACX,wBAAIA,UAAU,gBAAd,8BACA,wBAAIA,UAAU,eACTwB,EAAWQ,KAAI,SAACC,EAAQuB,GAAT,OACZ,kBAAC,IAAD,CACAC,IAAKD,EACLxD,UAAU,OACVE,GAAI,CACAa,SAAS,SAAD,OAAWkB,EAAOgB,SAG1B,wBAAIjD,UAAU,uBAAuByD,IAAKD,GACtC,yBAAKrD,IAAK8B,EAAOe,QAAS3C,IAAI,YAAYL,UAAU,mBACpD,yBAAKA,UAAU,cAAciC,EAAOyB,WACpC,yBAAK1D,UAAU,eACX,yBAAKA,UAAU,eACf,6BAAMiC,EAAO0B,eAEjB,yBAAK3D,UAAU,mBAAmBiC,EAAOc,kBCxCtDa,MAjDf,WAAkB,IAAD,EAEa5E,mBAAS,IAFtB,mBAEN6E,EAFM,KAECC,EAFD,KAuBb,OAnBAvE,qBAAU,YACS,uCAAG,gCAAAmC,EAAA,sEACOP,EAAIQ,IAAI,yCADf,OACRC,EADQ,OAGVC,EAAYD,EAAOE,KAAKA,KACxBgB,EAAajB,EAAUG,KAAI,SAAC+B,GAC5B,IAAIC,EAASD,EAAKE,YACjBC,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OAEzB,OADAH,EAAKE,YAAcD,EACZD,KAGPD,EAAShB,GAZK,2CAAH,qDAcfS,KACD,IAIC,6BACI,wBAAIvD,UAAU,cAAd,4BACA,yBAAKA,UAAU,eACV6D,EAAM7B,KAAI,SAAC+B,EAAMP,GAAP,OACP,yBAAKC,IAAKD,EAAOxD,UAAU,cACvB,yBAAKG,IAAK4D,EAAKE,YAAa5D,IAAI,kBAAkBL,UAAU,aAC5D,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,oBAAoB+D,EAAKZ,MACvC,kBAAC,IAAD,CACAjD,GAAI,CACAa,SAAU,SAAWgD,EAAKZ,KAC1BgB,MAAO,CACHC,OAAQL,EAAKxB,KAElBvC,UAAU,QACT,yBAAKA,UAAU,YAAf,YAAoC+D,EAAKZ,eC0D1DkB,MAjGf,WAAuB,IAAD,EAEcrF,mBAAS,IAFvB,mBAEXsF,EAFW,KAEDC,EAFC,KAyElB,OArEAhF,qBAAU,YACS,uCAAG,oDAAAmC,EAAA,sEACOP,EAAIQ,IAAI,uCADf,cACRC,EADQ,OAEVC,EAAYD,EAAOE,KAAKA,KAGxBC,EAAUF,EAAUG,KAAI,SAAAC,GACxB,OAAOA,EAAOC,WAEdC,EAAUN,EAAUG,KAAI,SAAAC,GACxB,OAAOA,EAAOG,WAKC,qCACA,qCAEfC,EAAkB,GAClBC,EAAmB,GAEvBP,EAAQC,KAAI,SAAAO,GACR,OAAQF,GAAiC,aAASE,EAAT,QAE7CJ,EAAQH,KAAI,SAAAO,GACR,OAAQD,GAAmC,aAASC,EAAT,QAI3CC,EAde,qCAcgBH,EAC/BI,EAde,qCAcgBH,EA7BrB,UAiCSnB,EAAIQ,IAAIa,GAjCjB,eAiCVE,EAjCU,iBAkCOvB,EAAIQ,IAAIc,GAlCf,QAkCVE,EAlCU,OAoCVC,EAAiBF,EAAWZ,KAAKA,KACjCe,EAAaF,EAASb,KAAKA,KAI3BgB,EAAcjB,EAAUG,KAAI,SAACC,GAC7BA,EAAOc,SAAW,GAClBd,EAAOe,QAAU,GACjBf,EAAOgB,MAAQ,GAEfL,EAAeM,SAAQ,SAAAC,GACnBN,EAAWK,SAAQ,SAAAE,GACZnB,EAAOG,UAAYgB,EAAKb,IAAMN,EAAOC,UAAYiB,EAAKZ,KACrDN,EAAOe,QAAUI,EAAKC,kBACtBpB,EAAOc,SAAWI,EAAKA,KACvBlB,EAAOgB,MAAQG,EAAKH,aAIhC,IAAIe,EAAS/B,EAAOuC,cACnBN,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OAErB,OADAjC,EAAOuC,cAAgBR,EAChB/B,KAGXsC,EAAYzB,GA9DE,4CAAH,qDAiEfS,KACD,IAGC,6BACI,wBAAIvD,UAAU,cAAd,8BACA,yBAAKA,UAAU,eACVsE,EAAStC,KAAI,SAACyC,EAASjB,GAAV,OACV,yBAAKC,IAAKD,EAAOxD,UAAU,eACvB,yBAAKG,IAAKsE,EAAQD,cAAexE,UAAU,WAAWK,IAAI,QAC1D,yBAAKL,UAAU,kBACX,wBAAIA,UAAU,qBAAqByE,EAAQf,WAC3C,uBAAG1D,UAAU,aAAb,SAAgCyE,EAAQ1B,UACxC,uBAAG/C,UAAU,sBAAb,aAA6CyE,EAAQd,cACrD,kBAAC,IAAD,CACA3D,UAAU,OACVE,GAAI,CAACa,SAAS,SAAD,OAAW0D,EAAQxB,SAC5B,yBAAKjD,UAAU,YAAf,YAAoCyE,EAAQf,oB,wBC5B7DgB,MA1Df,WAAiB,IAAD,EAEwB1F,mBAAS,IAFjC,mBAEL2F,EAFK,KAEOC,EAFP,OAGoB5F,mBAAS,IAH7B,mBAGL6F,EAHK,KAGKC,EAHL,KAKPC,EAAQC,cAARD,KA2BL,OAzBAxF,qBAAU,YACS,uCAAG,kCAAAmC,EAAA,sEACOP,EAAIQ,IAAJ,yDAA0DoD,IADjE,UAIiB,KAHzBnD,EADQ,QAIJE,KAAKA,KAAKmD,OAJN,gBAKVL,GAAc,GALJ,8BAONR,EAASxC,EAAOE,KAAKA,KAAKE,KAAI,SAAAkD,GAC9B,OAAOA,EAAOhD,WARR,UAUkBf,EAAIQ,IAAJ,+CAAgDyC,IAVlE,QAUJe,EAVI,OAaNC,EAASD,EAAcrD,KAAKA,KAAKE,KAAI,SAAAe,GACrC,OAAOA,EAASI,QAEpB2B,EAAYM,GACZR,EAAchD,EAAOE,KAAKA,KAAK,IAjBrB,4CAAH,qDAqBfyB,KACD,CAACwB,IAIAJ,EACA,yBAAK3E,UAAU,mBACX,kBAAC,IAAD,CAAuBqF,OAAO,MAAMC,MAAM,OAAOb,QAASM,IAC1D,yBAAK/E,UAAU,YACX,yBAAKA,UAAU,eAAe2E,EAAWY,OACzC,yBAAKvF,UAAU,UAAf,aAAmC2E,EAAWhB,cAC9C,yBAAK3D,UAAU,YAAf,cAAsC2E,EAAWjB,UAAjD,mBAA8EiB,EAAWa,UACzF,yBAAKxF,UAAU,UAAf,SAA+B6E,KAMvC,yBAAK7E,UAAU,mBACX,kBAAC,IAAD,CAAuBqF,OAAO,MAAMC,MAAM,OAAOb,QAASM,IAC1D,yBAAK/E,UAAU,YACX,yBAAKA,UAAU,eAAf,gCCyBDyF,MA3Ef,WAAwB,IAEfV,EAAQC,cAARD,KACDW,EAAWC,cAHI,EAKiB3G,mBAAS,IAL1B,mBAKZ4G,EALY,KAKAC,EALA,OAMW7G,mBAAS,GANpB,mBAMZ8G,EANY,KAMHC,EANG,KAsDnB,OA9CAxG,qBAAU,YACS,uCAAG,4CAAAmC,EAAA,sEACOP,EAAIQ,IAAJ,sDAAuD+D,EAASvB,MAAMC,SAD7E,cACRxC,EADQ,OAEVC,EAAYD,EAAOE,KAAKA,KACxBgB,EAAajB,EAAUG,KAAI,SAACgE,GAC5B,IAAIhC,EAASgC,EAAYxB,cACxBN,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OAEzB,OADI8B,EAAYxB,cAAgBR,EACzBgC,KAIHC,EAAenD,EAAWoD,QAAO,SAACC,EAAKC,GACvC,OAAOD,EAAMC,EAAIzC,eAClB,GAECxB,EAAUN,EAAUG,KAAI,SAACC,GACzB,OAAOA,EAAOG,WAEJ,qCACVE,EAAmB,GACvBH,EAAQH,KAAI,SAAAO,GACR,OAAQD,GAAmC,aAASC,EAAT,QAE3C8D,EALU,qCAKW/D,EAxBX,UAyBYnB,EAAIQ,IAAI0E,GAzBpB,QAyBVC,EAzBU,OA2BVC,EAAiBD,EAAcxE,KAAKA,KAExCgB,EAAajB,EAAUG,KAAI,SAAAC,GAOvB,OANAA,EAAOgB,MAAQ,GACfsD,EAAerD,SAAQ,SAAAD,GAChBhB,EAAOG,UAAYa,EAAMV,KACxBN,EAAOgB,MAAQA,EAAMA,UAGtBhB,KAGX8D,EAAWE,GACXJ,EAAc/C,GAxCA,4CAAH,qDA0CfS,KACF,CAACmC,EAASvB,MAAMC,SAGd,6BACI,wBAAIpE,UAAU,qBAAd,YAA4C+E,GAC5C,wBAAI/E,UAAU,wBAAuB,4BAAQA,UAAU,eAAe8F,GAAtE,wBAA6Gf,GAC7G,yBAAK/E,UAAU,eACV4F,EAAW5D,KAAI,SAACC,EAAQuB,GAAT,OACZ,yBAAKC,IAAKD,EAAOxD,UAAU,oBACvB,yBAAKG,IAAK8B,EAAOuC,cAAexE,UAAU,WAAWK,IAAI,kBACzD,yBAAKL,UAAU,uBACX,uBAAGA,UAAU,sBAAb,aAA6CiC,EAAO0B,cACpD,kBAAC,IAAD,CAAM3D,UAAU,OAAOE,GAAI,CAACa,SAAS,SAAD,OAAWkB,EAAOgB,SAClD,yBAAKjD,UAAU,YAAf,YAAoCiC,EAAOyB,oBC5D5D8C,MARf,WACI,OACI,yBAAKxG,UAAU,4BACX,gFAA+C,6BAA/C,8ECsDGyG,MAtDf,WAAsB,IAEb1B,EAAQC,cAARD,KAFY,EAGW/F,oBAAS,GAHpB,mBAGV4C,EAHU,KAGF8E,EAHE,OAIuB1H,mBAAS,IAJhC,mBAIV2H,EAJU,KAIIC,EAJJ,KAKbC,EAAc9B,EAAKb,QAAQ,KAAM,IAerC,OAbA3E,qBAAU,YACQ,uCAAG,4BAAAmC,EAAA,sEACOP,EAAIQ,IAAJ,kDAAmDkF,IAD1D,OAGiB,KAFzBjF,EADQ,QAGJE,KAAKA,KAAKmD,OAChByB,GAAU,GAEVE,EAAgBhF,EAAOE,KAAKA,MANlB,2CAAH,qDASfyB,KACA,CAACsD,IAIAjF,EAEA,6BACI,yBAAK5B,UAAU,4BACX,2DACC2G,EAAa3E,KAAI,SAACC,EAAQuB,GAAT,OACd,yBAAKC,IAAKD,EAAOxD,UAAU,kBACvB,yBAAKG,IAAK8B,EAAOoB,kBAAmBhD,IAAI,mBAAmBL,UAAU,aACrE,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,qBAAqBiC,EAAO6E,cAC1C,yBAAK9G,UAAU,aACViC,EAAO8E,aAEZ,kBAAC,IAAD,CACA/G,UAAU,OACVE,GAAI,CACAa,SAAS,SAAD,OAAWkB,EAAOgB,SAE1B,yBAAKjD,UAAU,sBAAf,YAA8CiC,EAAO6E,sBAU7E,kBAAC,EAAD,OCvBOE,MApBf,WACE,OACE,kBAAC,IAAD,CAAQC,cAAc,GAEpB,yBAAKjH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkH,OAAK,EAACC,KAAK,IAAIC,UAAWxD,IACjC,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,eAAeC,UAAW/C,IAC5C,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,cAAcC,UAAW1C,IAC3C,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,cAAcC,UAAW3B,IAC3C,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,mBAAmBC,UAAWX,IAChD,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,cAAcC,UAAWZ,QCbjCa,QACW,cAA7B5H,OAAOiG,SAAS4B,UAEe,UAA7B7H,OAAOiG,SAAS4B,UAEhB7H,OAAOiG,SAAS4B,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9d30df8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IconeTwitch.59ad91f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/Search.c6a0effb.svg\";","module.exports = __webpack_public_path__ + \"static/media/MenuIco.970dcdb3.svg\";","module.exports = __webpack_public_path__ + \"static/media/Croix.a55a5aa3.svg\";","import React, {useState, useEffect} from 'react'\nimport logo from './IconeTwitch.svg'\nimport search from './Search.svg'\nimport menuIco from './MenuIco.svg'\nimport croix from './Croix.svg'\nimport {Link} from 'react-router-dom'\n\nfunction Header() {\n\n    const [menu, showMenu] = useState(false);\n    const [smallScreen, setSmallScreen] = useState(false);\n    const [searchInput, setSearchInput] = useState(\"\");\n    \n    const toggleNavRes = () => {\n        showMenu(!menu)\n    }\n\n    useEffect(() => {\n        const mediaQuery = window.matchMedia(\"(max-width: 900px)\");\n        // addListener c'est comme addeventlistener pour les medias queries en JS\n        mediaQuery.addListener(handleMediaQueryChange);\n        handleMediaQueryChange(mediaQuery);\n\n        return () => {\n            mediaQuery.removeListener(handleMediaQueryChange)\n        }\n    })\n\n    const handleMediaQueryChange = mediaQuery => {\n        if(mediaQuery.matches){\n            setSmallScreen(true);\n        } else {\n            setSmallScreen(false);\n        }\n    }\n\n    const hideMenu = () => {\n        if(menu === true) {\n            showMenu(!menu)\n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n    }\n    const handleKeyPress = e => {\n        setSearchInput(e.target.value);\n    }\n\n    return (\n        <div>\n            <nav className=\"headerTop\">\n                {(menu || !smallScreen) && (\n\n                <ul className=\"listeMenu\">\n                    <li onClick={hideMenu} className=\"liensNav\">\n                        <Link className=\"lien\" to=\"/\">\n                            <img src={logo} alt=\"logo twitch\" className=\"logo\"/>\n                        </Link>\n                    </li>\n                    <li onClick={hideMenu} className=\"liensNav\">\n                        <Link className=\"lien\" to=\"/\">\n                            Top Games\n                        </Link>\n                    </li>\n                    <li onClick={hideMenu} className=\"liensNav\">\n                        <Link className=\"lien\" to=\"/top-streams\">\n                            Top Streams\n                        </Link>\n                    </li>\n                    <li className=\"liensNav\">\n                        <form className=\"formSubmit\" onSubmit={handleSubmit}>\n                            <input required value={searchInput} onChange={(e) => handleKeyPress(e)} type=\"text\" className=\"inputRecherche\"/>\n                            <Link\n                            className=\"lien\"\n                            to={{pathname: `/resultats/${searchInput}`}}>\n                                <button type=\"submit\">\n                                    <img src={search} alt=\"icone loupe\" className=\"logoLoupe\"/>\n                                </button>\n                            </Link>\n                        </form>\n                    </li>\n                </ul>\n\n                )}\n            </nav>\n            <div className=\"menuResBtn\">\n                <img onClick={toggleNavRes} src={!menu ? menuIco : croix} alt=\"icone menu responsive\" className=\"menuIco\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import axios from 'axios';\n\nlet api = axios.create({\n    headers : {\n        \"Client-ID\" : \"g3m4uywssvrmdk4sdcynzfx923i2dr\",\n        \"Authorization\" : \"Bearer 06ffvx7n0dofzzlg682vjmbt2n5x4m\"\n    }\n})\n\n/*\n\n    CLIENT_ID = g3m4uywssvrmdk4sdcynzfx923i2dr\n    REDIRECT = 'http://127.0.0.1/'\n\n    LIEN AUTH = https://id.twitch.tv/oauth2/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT}&response_type=token\n\n    LIEN REMPLI = https://id.twitch.tv/oauth2/authorize?client_id=g3m4uywssvrmdk4sdcynzfx923i2dr&redirect_uri=http://127.0.0.1/&response_type=token\n\n*/\n\n\nexport default api;","import React, {useEffect, useState} from 'react'\nimport api from '../../api'\nimport {Link} from 'react-router-dom'\n\nfunction Sidebar() {\n\n    const [topStreams, setTopStreams] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get('https://api.twitch.tv/helix/streams');\n            let dataArray = result.data.data;\n            // console.log(dataArray);\n\n            let gameIDs = dataArray.map(stream => {\n                return stream.game_id\n            })\n            let userIDs = dataArray.map(stream => {\n                return stream.user_id\n            })\n            // console.log(gameIDs, userIDs);\n\n            //Création des urls personnalisés\n            let baseUrlGames = 'https://api.twitch.tv/helix/games?';\n            let baseUrlUsers = 'https://api.twitch.tv/helix/users?';\n\n            let queryParamsGame = \"\";\n            let queryParamsUsers = \"\";\n\n            gameIDs.map(id => {\n                return (queryParamsGame = queryParamsGame + `id=${id}&`)\n            })\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n\n            //url final\n            let urlFinalGames = baseUrlGames + queryParamsGame;\n            let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n            // console.log(urlFinalGames);\n\n            //Appel\n            let gamesNames = await api.get(urlFinalGames);\n            let getUsers = await api.get(urlFinalUsers);\n\n            let gamesNameArray = gamesNames.data.data;\n            let arrayUsers = getUsers.data.data;\n            // console.log(arrayUsers);\n\n            //Création du tableau final\n            let finalArray =  dataArray.map((stream) => {\n                stream.gameName = \"\";\n                stream.truePic = \"\";\n                stream.login = \"\";\n\n                gamesNameArray.forEach(name => {\n                    arrayUsers.forEach(user => {\n                        if(stream.user_id === user.id && stream.game_id === name.id){\n                            stream.truePic = user.profile_image_url;\n                            stream.gameName = name.name;\n                            stream.login = user.login\n                        }\n                    })\n                })\n                return stream;\n            })\n\n            setTopStreams(finalArray.slice(0,6));\n\n        }\n        fetchData();\n    }, [])\n\n    // console.log(topStreams);\n    return (\n        <div className=\"sidebar\">\n            <h2 className=\"titreSidebar\">Chaînes recommandées</h2>\n            <ul className=\"listeStream\">\n                {topStreams.map((stream, index) => (\n                    <Link\n                    key={index}\n                    className=\"lien\"\n                    to={{\n                        pathname: `/live/${stream.login}`\n                    }} \n                    >\n                        <li className=\"containerFlexSidebar\" key={index}>\n                            <img src={stream.truePic} alt=\"logo user\" className=\"profilPicRonde\"/>\n                            <div className=\"streamUser\">{stream.user_name}</div>\n                            <div className=\"viewerRight\">\n                                <div className=\"pointRouge\"></div>\n                                <div>{stream.viewer_count}</div>\n                            </div>\n                            <div className=\"gameNameSidebar\">{stream.gameName}</div>\n                        </li>\n                    </Link>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, {useState, useEffect} from 'react'\nimport api from '../../api'\nimport {Link} from 'react-router-dom'\n\nfunction Games() {\n\n    const [games, setGames] = useState([])\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get('https://api.twitch.tv/helix/games/top')\n            // console.log(result.data.data);\n            let dataArray = result.data.data;\n            let finalArray = dataArray.map((game) => {\n                let newUrl = game.box_art_url\n                .replace(\"{width}\", \"250\")\n                .replace(\"{height}\", \"300\");\n            game.box_art_url = newUrl;\n            return game;\n            })\n\n            setGames(finalArray);\n        }\n        fetchData();\n    }, [])\n    // console.log(games);\n\n    return (\n        <div>\n            <h1 className=\"titreGames\">Jeux les plus populaires</h1>\n            <div className=\"flexAccueil\">\n                {games.map((game, index) => (\n                    <div key={index} className=\"carteGames\">\n                        <img src={game.box_art_url} alt=\"jeu profile pic\" className=\"imgCarte\"/>\n                        <div className=\"cardBodyGames\">\n                            <h5 className=\"titreCartesGames\">{game.name}</h5>\n                            <Link\n                            to={{\n                                pathname: \"/game/\" + game.name,\n                                state: {\n                                    gameID: game.id\n                                }\n                            }} className=\"lien\">\n                                <div className=\"btnCarte\">Regarder {game.name}</div>\n                            </Link>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Games\n","import React, {useEffect, useState} from 'react'\nimport api from '../../api'\nimport {Link} from 'react-router-dom'\n\nfunction TopStreams() {\n\n    const [channels, setChannels] = useState([])\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get('https://api.twitch.tv/helix/streams');\n            let dataArray = result.data.data;\n            // console.log(dataArray);\n\n            let gameIDs = dataArray.map(stream => {\n                return stream.game_id\n            })\n            let userIDs = dataArray.map(stream => {\n                return stream.user_id\n            })\n            // console.log(gameIDs, userIDs);\n\n            //Création des urls personnalisés\n            let baseUrlGames = 'https://api.twitch.tv/helix/games?';\n            let baseUrlUsers = 'https://api.twitch.tv/helix/users?';\n\n            let queryParamsGame = \"\";\n            let queryParamsUsers = \"\";\n\n            gameIDs.map(id => {\n                return (queryParamsGame = queryParamsGame + `id=${id}&`)\n            })\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n\n            //url final\n            let urlFinalGames = baseUrlGames + queryParamsGame;\n            let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n            // console.log(urlFinalGames);\n\n            //Appel\n            let gamesNames = await api.get(urlFinalGames);\n            let getUsers = await api.get(urlFinalUsers);\n\n            let gamesNameArray = gamesNames.data.data;\n            let arrayUsers = getUsers.data.data;\n            // console.log(arrayUsers);\n\n            //Création du tableau final\n            let finalArray =  dataArray.map((stream) => {\n                stream.gameName = \"\";\n                stream.truePic = \"\";\n                stream.login = \"\";\n\n                gamesNameArray.forEach(name => {\n                    arrayUsers.forEach(user => {\n                        if(stream.user_id === user.id && stream.game_id === name.id){\n                            stream.truePic = user.profile_image_url;\n                            stream.gameName = name.name;\n                            stream.login = user.login\n                        }\n                    })\n                })\n                let newUrl = stream.thumbnail_url\n                .replace('{width}', \"320\")\n                .replace('{height}', \"180\")\n                stream.thumbnail_url = newUrl;\n                return stream;\n            })\n\n            setChannels(finalArray);\n\n        }\n        fetchData();\n    }, [])\n    // console.log(channels);\n    return (\n        <div>\n            <h1 className=\"titreGames\">Stream les plus populaires</h1>\n            <div className=\"flexAccueil\">\n                {channels.map((channel, index) => (\n                    <div key={index} className=\"carteStream\">\n                        <img src={channel.thumbnail_url} className=\"imgCarte\" alt=\"jeu\"/>\n                        <div className=\"cardBodyStream\">\n                            <h5 className=\"titreCartesStream\">{channel.user_name}</h5>\n                            <p className=\"txtStream\">Jeu : {channel.gameName}</p>\n                            <p className=\"txtStream  viewers\">Viewers : {channel.viewer_count}</p>\n                            <Link \n                            className=\"lien\"\n                            to={{pathname: `/live/${channel.login}`}}>\n                                <div className=\"btnCarte\">Regarder {channel.user_name}</div>\n                            </Link>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default TopStreams\n","import React, {useState, useEffect} from 'react'\nimport ReactTwitchEmbedVideo from 'react-twitch-embed-video'\nimport {useParams} from 'react-router-dom'\nimport api from '../../api'\n\nfunction Live() {\n\n    const [infoStream, setInfoStream] = useState([]);\n    const [infoGame, setInfoGame] = useState([]);\n\n    let {slug} = useParams();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get(`https://api.twitch.tv/helix/streams?user_login=${slug}`)\n            // console.log(result);\n\n            if(result.data.data.length === 0){\n                setInfoStream(false)\n            } else {\n                let gameID = result.data.data.map(gameid => {\n                    return gameid.game_id;\n                })\n                const resultNomGame = await api.get(`https://api.twitch.tv/helix/games?id=${gameID}`)\n                // console.log(resultNomGame.data.data);\n    \n                let nomJeu = resultNomGame.data.data.map(gameName => {\n                    return gameName.name\n                })\n                setInfoGame(nomJeu)\n                setInfoStream(result.data.data[0]) \n            }\n\n        }\n        fetchData()  \n    }, [slug])\n\n    return (\n\n        infoStream ?\n        <div className=\"containerDecale\">\n            <ReactTwitchEmbedVideo height=\"754\" width=\"100%\" channel={slug} />\n            <div className=\"contInfo\">\n                <div className=\"titreStream\">{infoStream.title}</div>\n                <div className=\"viewer\">Viewers : {infoStream.viewer_count}</div>\n                <div className=\"infogame\">Streamer : {infoStream.user_name}, &nbsp; Langue : {infoStream.language}</div>\n                <div className=\"nomJeu\">Jeu : {infoGame}</div>\n            </div>\n        </div>\n\n        :\n        \n        <div className=\"containerDecale\">\n            <ReactTwitchEmbedVideo height=\"754\" width=\"100%\" channel={slug} />\n            <div className=\"contInfo\">\n                <div className=\"titreStream\">Le Streamer est offline !</div>\n            </div>\n        </div>\n        \n\n    )\n}\n\nexport default Live\n","import React, {useState, useEffect} from 'react'\nimport api from '../../api'\nimport {useParams, useLocation, Link} from 'react-router-dom'\n\n\nfunction GameStreams() {\n\n    let {slug} = useParams();\n    let location = useLocation();\n\n    const [streamData, setStreamData] = useState([])\n    const [viewers, setViewers] = useState(0)\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get(`https://api.twitch.tv/helix/streams?game_id=${location.state.gameID}`)\n            let dataArray = result.data.data;\n            let finalArray = dataArray.map((gameStreams) => {\n                let newUrl = gameStreams.thumbnail_url\n                .replace(\"{width}\", \"320\")\n                .replace(\"{height}\", \"180\");\n                gameStreams.thumbnail_url = newUrl;\n            return gameStreams;\n            })\n\n            //Calcul total des viewers\n            let totalViewers = finalArray.reduce((acc, val) => {\n                return acc + val.viewer_count;    \n            }, 0);\n\n            let userIDs = dataArray.map((stream) => {\n                return stream.user_id;\n            })\n            let baseUrl = \"https://api.twitch.tv/helix/users?\"\n            let queryParamsUsers = \"\";\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n            let finalUrl = baseUrl + queryParamsUsers;\n            let getUsersLogin = await api.get(finalUrl);\n\n            let userLoginArray = getUsersLogin.data.data;\n\n            finalArray = dataArray.map(stream => {\n                stream.login = \"\";\n                userLoginArray.forEach(login => {\n                    if(stream.user_id === login.id){\n                        stream.login = login.login\n                    }\n                })\n                return stream;\n            })\n            // console.log(finalArray);\n            setViewers(totalViewers)\n            setStreamData(finalArray);\n        }\n        fetchData();\n    },[location.state.gameID])\n\n    return (\n        <div>\n            <h1 className=\"titreGamesStreams\">Stream : {slug}</h1>\n            <h3 className=\"sousTitreGameStreams\"><strong className=\"textColored\">{viewers}</strong> personnes regardent {slug}</h3>\n            <div className=\"flexAccueil\">\n                {streamData.map((stream, index) => (\n                    <div key={index} className=\"carteGameStreams\">\n                        <img src={stream.thumbnail_url} className=\"imgCarte\" alt=\"jeu carte img\"/>\n                        <div className=\"cardBodyGameStreams\">\n                            <p className=\"txtStream  viewers\">Viewers : {stream.viewer_count}</p>\n                            <Link className=\"lien\" to={{pathname: `/live/${stream.login}`}}>\n                                <div className=\"btnCarte\">Regarder {stream.user_name}</div>\n                            </Link>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default GameStreams\n","import React from 'react'\n\nfunction Error() {\n    return (\n        <div className=\"containerDecaleResultats\">\n            <h4>Résultats de recherche : Pas de résultats, <br/> Vérifiez l'orthographe de votre saisie, ou ce streamer n'existe pas.</h4>\n        </div>\n    )\n}\n\nexport default Error\n","import React, {useState, useEffect} from 'react'\nimport api from '../../api'\nimport {Link, useParams} from 'react-router-dom'\nimport Error from '../Error/Error'\n\nfunction Resultats() {\n\n    let {slug} = useParams()\n    const [result, setResult] = useState(true);\n    const [streamerInfo, setStreamerInfo] = useState([])\n    let cleanSearch = slug.replace(/ /g, '');\n\n    useEffect(() => {\n       const fetchData = async () => {\n           const result = await api.get(`https://api.twitch.tv/helix/users?login=${cleanSearch}`)\n\n           if(result.data.data.length === 0){\n               setResult(false)\n           } else {\n               setStreamerInfo(result.data.data)\n           }\n       }\n       fetchData()\n    }, [cleanSearch])\n\n    return (\n\n        result ?\n\n        <div>\n            <div className=\"containerDecaleResultats\">\n                <h4>Résultats de recherche :</h4>\n                {streamerInfo.map((stream, index) => (\n                    <div key={index} className=\"carteResultats\">\n                        <img src={stream.profile_image_url} alt=\"resultat profile\" className=\"imgCarte\"/>\n                        <div className=\"cardBodyResults\">\n                            <h5 className=\"titreCartesStream\">{stream.display_name}</h5>\n                            <div className=\"txtResult\">\n                                {stream.description}\n                            </div>\n                            <Link\n                            className=\"lien\"\n                            to={{\n                                pathname: `/live/${stream.login}`\n                            }}>\n                                <div className=\"btnCarte btnResult\">Regarder {stream.display_name}</div>\n                            </Link>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n\n        :\n\n        <Error/>\n    )\n}\n\nexport default Resultats\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header'\nimport Sidebar from './Components/Sidebar/Sidebar'\nimport Games from './Components/Games/Games'\nimport TopStreams from './Components/TopStreams/TopStreams'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Live from './Components/Live/Live'\nimport GameStreams from './Components/GameStreams/GameStreams'\nimport Resultats from './Components/Resultats/Resultats'\nimport Error from './Components/Error/Error'\n\nfunction App() {\n  return (\n    <Router forceRefresh={true}>\n    \n      <div className=\"App\">\n        <Header/>\n        <Sidebar/>\n        <Switch>\n          <Route exact path=\"/\" component={Games}/>\n          <Route exact path=\"/top-streams\" component={TopStreams}/>\n          <Route exact path=\"/live/:slug\" component={Live}/>\n          <Route exact path=\"/game/:slug\" component={GameStreams}/>\n          <Route exact path=\"/resultats/:slug\" component={Resultats}/>\n          <Route exact path=\"/resultats/\" component={Error}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}